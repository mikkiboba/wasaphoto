openapi: 3.0.0
info:
  title: WASAPhotos
  version: "2.0"
  description: |
    API for the project submitted for the WASA course.
    Users can log in, register, upload photos, comment photos, like photos, follow each other and ban each other.
    Github link : https://github.com/mikkiboba/wasaphotohw.git
tags:
  - name: login actions
    description: login and registration
  - name: user actions
    description: done by the user
  - name: post actions
    description: interactions with the posts
  - name: like actions
    description: interaction with likes
  - name: comment actions
    description: interaction with comments
  - name: follow actions
    description: follow/unfollow
  - name: ban actions
    description: ban/unban
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMsg"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMsg"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMsg"
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMsg"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMsg"
  schemas:
    Username:
      type: string
      pattern: '.*'
      description: User's username
      example: "PolloPalla"
      minLength: 3
      maxLength: 10
    Token:
      type: string
      pattern: "/^[a-z0-9]+$/i"
      description: User's auth token. Also used as the identifier
      minLength: 36
      maxLength: 36
    CommentID:
      type: integer
      description: Comment's id
      example: 1
    ErrorMsg:
      description: Error message
      type: string
    UserInfo:
      description: User's info
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        numposts:
          description: Number of photos posted by the user
          type: integer
          minimum: 0
          example: 10
        numfollowers:
          description: Number of people who follow the user
          type: integer
          minimum: 0
          example: 10
        numfollowing:
          description: Number of people who the user is following
          type: integer
          minimum: 0
          example: 10
    Photo:
      description: Photo's info
      type: object
      properties:
        id:
          description: Photo's id
          type: integer
          example: 1
        user:
          $ref: "#/components/schemas/Token"
        date:
          description: The date in which the photo has been posted
          type: string
          format: date
          example: "2000-01-01"
          minLength: 10
          maxLength: 10
        hour:
          description: The hour in which the photo has been posted
          type: string
          format: time
          minLength: 5
          maxLength: 5
        numlikes:
          description: The number of likes of a photo
          type: integer
          minimum: 0
          example: 10
        numcomments:
          description: The number of comments of a photo
          type: integer
          minimum: 0
          example: 10
    Stream:
      description: A user's stream
      type: array
      minItems: 0
      maxItems: 99999
      items:
        $ref: "#/components/schemas/Photo"
    PostID:
      description: A post's id
      type: integer
      minimum: 0
      example: 10
  parameters:
    Username:
      name: username
      in: path
      description: user's username
      required: true
      schema:
        $ref: "#/components/schemas/Username"
    PostID:
      name: postid
      in: path
      description: a post's id
      required: true
      schema:
        $ref: "#/components/schemas/PostID"
    FollowName:
      name: followname
      in: path
      description: the username of the user to follow/unfollow
      required: true
      schema:
        $ref: "#/components/schemas/Username"
    BanName:
      name: banname
      in: path
      description: the username of the user to ban/unban
      required: true
      schema:
        $ref: "#/components/schemas/Username"
    UserLiking:
      name: userliking
      in: path
      description: the username of the user liking the post
      required: true
      schema: 
        $ref: "#/components/schemas/Username"
    CommentID:
      name: commentid
      in: path
      description: the id of the post's comment
      required: true
      schema:
        $ref: "#/components/schemas/CommentID"

security:
  - BearerAuth: []
paths:
  /session:
    post:
      operationId: doLogin
      security: []
      tags: ["login actions"]
      summary: Log in the user
      description: |
        Get the username and logs in the user if the username is in the database.
        If not, it registrates the user adding the username into the database.
        It returns the authorization token.
      requestBody:
        description: The user's username
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "201":
          description: User registered and logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}:
    parameters:
      - $ref: "#/components/parameters/Username"
    put:
      operationId: setMyUserName
      tags: ["user actions"]
      summary: Change the user's username
      description: |
        Set a new username for the user if it's not already taken.
      requestBody:
        description: The new username
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "204":
          description: Username update successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      operationId: getUserProfile
      tags: ["user actions"]
      summary: Get the user's profile info
      description: |
        Get the info about the user's profile.
      responses:
        "200":
          description: User's info successfully obtained
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/stream:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      operationId: getMyStream
      tags: ["user actions"]
      summary: Get the user's stream
      description: |
        Get the stream of the user (photos posted by other people) in reverse chronological order
      responses:
        "200":
          description: User's stream successfully obtained
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        "204":
          description: There are no posts to show 
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/posts:
    parameters:
      - $ref: "#/components/parameters/Username"
    post:
      operationId: uploadPhoto
      tags: ["post actions"]
      summary: Upload a photo
      description: |
        Upload a photo inserting it into the database
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Photo to upload
              type: string
              format: binary
              minLength: 1
              maxLength: 10000
        required: true
      responses:
        "201":
          description: "Photo uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostID"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/posts/{postid}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PostID"
    delete:
      operationId: deletePhoto
      tags: ["post actions"]
      summary: Delete a photo
      description: |
        Delete a photo uploaded
      responses:
        "204":
          description: "Photo deleted successfully"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/posts/{postid}/comments:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PostID"
    post:
      operationId: commentPhoto
      tags: ["comment actions"]
      summary: Comment a photo
      description: |
        Comment a photo
      responses:
        "201":
          description: Photo unliked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentID"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/posts/{postid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/PostID"
      - $ref: "#/components/parameters/CommentID"
    delete:
      operationId: uncommentPhoto
      tags: ["comment actions"]
      summary: Uncomment a photo
      description: |
        Uncomment a photo
      responses:
        "204":
          description: Photo unliked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/follows/{followname}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/FollowName"
    put:
      security: []
      operationId: followUser
      tags: ["follow actions"]
      summary: Follow a user
      description: |
        Follow a user
      responses:
        "204":
          description: User followed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: unfollowUser
      tags: ["follow actions"]
      summary: Unfollow a user
      description: |
        Unfollow a user
      responses:
        "204":
          description: User unfollowed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{username}/bans/{banname}:
    parameters:
      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/BanName"
    put:
      operationId: banUser
      tags: ["ban actions"]
      summary: Ban a user
      description: |
        Ban a user
      responses:
        "204":
          description: User banned successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: unbanUser
      tags: ["ban actions"]
      summary: Unban a user
      description: |
        Unban a user
      responses:
        "204":
          description: User unbanned successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /posts/{postid}/likes/{userliking}:
    parameters:
      - $ref: "#/components/parameters/PostID"
      - $ref: "#/components/parameters/UserLiking"
    put:
      operationId: likePhoto
      tags: ["like actions"]
      summary: Like a photo
      description: |
        Like a photo
      responses:
        "204":
          description: Photo liked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: unlikePhoto
      tags: ["like actions"]
      summary: Unlike a photo
      description: |
        Unlike a photo
      responses:
        "204":
          description: Photo unliked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"