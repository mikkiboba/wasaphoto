openapi: 3.0.3
info:
  title: WASAPHOTO APIs
  version: 1.0.0

tags:
  - name: login
    description: Login actions
  - name: profile
    description: User's actions

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    UserID:
      name: userid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
    PhotoID:
      name: photoid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
    LikeID:
      name: likeid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
    CommentID:
      name: commentid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
    BanID:
      name: banid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
    FollowID:
      name: followid
      in: path
      required: true
      schema:
        type: integer
        example: 1
        readOnly: true
  schemas:
    UserId:
      title: UserId
      description: User's ID
      type: object
      properties:
        id:
          description: User's ID
          type: integer
          example: 1
          minimum: 0
    Username:
      title: Username
      description: User's username
      type: object
      properties:
        username:
          description: User's username
          type: string
          example: Mikki
          pattern: ^[a-zA-Z0-9]*$
          minLength: 3
          maxLength: 16
    PhotoId:
      title: PhotoId
      description: Photo's Id
      type: object
      properties:
        id:
          description: Photo's ID
          type: integer
          example: 1
          minimum: 0
    PhotoInfo:
      title: PhotoInfo
      description: Information about a photo
      type: object
      properties:
        p_id:
          $ref: "#/components/schemas/PhotoId"
        date:
          description: Photo's upload date
          type: string
          format: date-time
          example: "2021-01-30T08:30:00Z"
          minLength: 20
          maxLength: 20
        likes:
          description: Photo's number of likes 
          type: integer
          minimum: 0
        comments:
          description: Photo's number of comments
          type: integer
          minimum: 0
    Photo:
      title: Photo
      description: Photo
      properties:
        info:
          $ref: "#/components/schemas/PhotoInfo"
        image:
          description: Photo's image
          type: string
          format: base64
          pattern: ^data:image\/(?:gif|png|jpeg|bmp|webp)(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+/])+={0,2}$
          minLength: 0
          maxLength: 1000
    StreamId:
      title: StreamId
      description: A user's stream's ID
      type: object
      properties:
        id:
          description: The Stream's ID
          type: integer
          example: 1
          minimum: 0
    Stream:
      title: Stream
      description: Stream of photos (timeline)
      type: object
      properties:
        s_id:
          $ref: "#/components/schemas/StreamId"
        user:
          $ref: "#/components/schemas/UserId"
        array:
          description: Content of the stream
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: object
            properties:
              photo: { $ref: "#/components/schemas/PhotoId" }
              info: { $ref: "#/components/schemas/PhotoInfo" }
    CommentId:
      title: CommentId
      description: Comment's ID
      type: object
      properties:
        id:
          description: The comment's ID
          type: integer
          example: 1
          minimum: 0
security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
              If the user does not exist, it will be created,
              and an identifier is returned.
              If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
         application/json:
          schema:
            $ref: "#/components/schemas/Username"
        required: true
      responses:
       '201':
        description: User log-in action successful
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserId"

  /profile/{userid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    put:
      tags: ['profile']
      operationId: setMyUserName
      summary: Set the username
      description: Set the user's username with the specified one
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        '204':
          description: Username set successfully
        '404':
          description: User not found
    
    get:
      tags: ['profile']
      operationId: getUserProfile
      summary: Get a user profile
      description: Get a user profile from the id
      responses:
        '201':
          description: User obtained successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"

  /profile/{userid}/stream:
    parameters:
      - $ref: "#/components/parameters/UserID"
    post:
      tags: ['profile']
      operationId: uploadPhoto
      summary: Upload a photo
      description: Upload a photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoInfo"
          image/png:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        '201':
          description: Photo uploaded succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoId"

    get:
      tags: ['profile']
      operationId: getMyStream
      summary: Get the user's stream
      description: Get the user's stream
      responses:
        '201':
          description: Stream obtained successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"

  /profile/{userid}/stream/{photoid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/PhotoID"
    delete:
      tags: ['profile']
      operationId: deletePhoto
      summary: Delete a photo
      description: Delete a photo
      responses:
        '204':
          description: Photo deleted succesfully

  /profile/{userid}/stream/{photoid}/likes/{likeid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/LikeID"
    put:
      tags: ['profile']
      operationId: likePhoto
      summary: Like a photo
      description: Put a like to a photo
      responses:
        '204':
          description: Photo liked successfully
    delete:
      tags: ['profile']
      operationId: unlikePhoto
      summary: Unlike a photo
      description: Delete the like to a photo
      responses:
        '204':
          description: Like deleted successfully
  
  /profile/{userid}/stream/{photoid}/comments:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/PhotoID"
    post:
      tags: ['profile']
      operationId: commentPhoto
      summary: Comment a photo
      description: Comment a photo
      responses:
        '201':
          description: Photo commented successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentId"

  /profile/{userid}/stream/{photoid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/CommentID"
    delete:
      tags: ['profile']
      operationId: uncommentPhoto
      summary: Uncomment a photo
      description: Delete a comment to a photo
      responses:
        '204': 
          description: Comment deleted successfully
  
  /profile/{userid}/following/{followid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/FollowID"
    put:
      tags: ['profile']
      operationId: followUser
      summary: Follow a user
      description: Add a user to the list of following
      responses:
        '204':
          description: User followed successfully
    delete:
      tags: ['profile']
      operationId: unfollowUser
      summary: Unfollow a user
      description: Remove a user from the list of following
      responses:
        '204':
          description: User unfollowed successfully
  
  /profile/{userid}/ban/{banid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - $ref: "#/components/parameters/BanID"
    put:
      tags: ['profile']
      operationId: banUser
      summary: Ban a user
      description: Ban (block) a user
      responses:
        '204':
          description: user banned successfully
    delete:
      tags: ['profile']
      operationId: unbanUser
      summary: Unban a user
      description: Unban (unblock) a user
      responses:
        '204':
          description: User unbanned successfully
