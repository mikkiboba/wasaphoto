openapi: 3.0.0
info:
  title: WASAPhoto APIs
  description: APIs for WASAPhoto
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    MethodNotAllowed:
      description: Method not allowed
    UserNotFound:
      description: The user cannot be found
  parameters:
    CommentID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: comment
      in: path
      required: true
    PhotoID:
      schema:
        type: integer
        example: 1
      name: post
      in: path
      required: true
    User:
      schema:
        $ref: "#/components/schemas/User"
      name: user
      in: path
      required: true
  schemas:
    User:
      tags: ['users']
      title: UserName
      description: User's username information
      type: object
      properties:
        username: 
          description: User's username
          type: string
          example: Mikki123
    PhotoInfo:
      tags: ['photo']
      title: PhotoInfo
      description: Information of a photo
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PhotoId"
        date:
          description: Photo's upload date
          type: string
          format: date-time
        likes:
          description: Photo's number of likes
          type: integer
          minimum: 0
        comments:
          description: Photo's number of comments
          type: integer
          minimum: 0
    Photo:
      tags: ['photo']
      description: Photo's details
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PhotoId"
        photo: 
          description: Photo's details
          type: string
          format: base64
    PhotoId:
      tags: ['photo']
      title: Photo's Id
      description: Photo's ID
      type: object
      properties:
        photoId:
          description: Photo's ID
          type: integer
          example: 19338
    Profile:
      tags: ['profile']
      title: User's profile
      description: Informations about a user's profile
      type: object
      properties:
        followers:
          description: Number of followers
          type: integer
          minimum: 0
          example: 100
        following:
          description: Number of following
          type: integer
          minimum: 0
          example: 50
        photos:
          description: Number of photos uploaded
          type: integer
          minimum: 0
          example: 16
    Stream:
      tags: ['photo']
      title: Stream of photos
      descriptioin: Stream of photos (timeline)
      type: object
      properties:
        array:
          type: array
          items:
            type: object
            properties:
              photo: { $ref: "#/components/schemas/Photo" }
              info: { $ref: "#/components/schemas/PhotoInfo" }
    Comment:
      tags: ['photo']
      description: Comment's text
      type: object
      properties:
        comment:
          description: Comment's text
          type: string
          example: "Bella foto11!!11!"
    CommentId:
      tags: ['photo']
      description: Comment's ID
      type: object
      properties:
        id: 
          description: Comment's ID
          type: integer
          example: 1
security:
  - bearerAuth: []
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "Ë†.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /username:
    put:
      tags: ['profile']
      operationId: setMyUserName
      summary: Set the username
      description: Update the user's username with the specified one
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        204: 
          description: Username update successful
        404:
          description: Username not valid
  /profile:
    post:
      tags: ['profile']
      summary: Upload a photo
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoInfo"
          image/png:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        201:
          description: Photo uploaded succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoId"
    get:
      tags: ['profile']
      operationId: getMyStream
      summary: Get user's stream of photo
      description: Get stream of photo from the user's following; an array of photo with its information
      responses:
        200:
          description: Stream obtained successfully
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/Stream"
  /profile/{post}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    delete:
      tags: ['profile']
      operationId: deletePhoto
      summary: Delete a photo
      description: Delete a photo from the profile
      responses:
        200:
          description: Photo deleted successfully
        404:
          description: Photo not found
  /user:
    get:
      tags: ['users']
      operationId: getUserProfile
      summary: Get another user profile
      description: Get the user profile with number of photos, number of followers, number of following and a stream of photo
      responses: 
        200:
          description: User's profile obtained successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            image/png:
              schema:
                $ref: "#/components/schemas/Stream"
        404:
          $ref: "#/components/responses/UserNotFound"
        405:
          $ref: "#/components/responses/MethodNotAllowed"
  /user/{post}/comments:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    post:
      tags: ['comments']
      operationId: commentPhoto
      summary: Comment a photo
      description: Add a comment on a user's photo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        200:
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentId"
        404:
          description: Photo not found
        405:
          $ref: "#/components/responses/MethodNotAllowed"
  /user/{post}/comments/{comment}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/CommentID"
    delete:
      tags: ['comments']
      operationId: uncommentPhoto
      summary: Uncomment a photo
      description: Deletes the user comment from the comments of a photo
      responses:
        200:
          description: Comment Deleted Successfully
        404:
          description: Comment not found
  /user/{post}/likes:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
    put:
      tags: ['likes']
      operationId: likePhoto
      summary: Like a photo
      description: Add a like on the photo's number of likes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Photo liked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Photo not found
        405:
          $ref: "#/components/responses/MethodNotAllowed"
  /user/{post}/likes/{user}:
    parameters:
      - $ref: "#/components/parameters/PhotoID"
      - $ref: "#/components/parameters/User"
    delete:
      tags: ['likes']
      operationId: unlikePhoto
      summary: Unlike a photo
      description: Delete the user's username from the list of users who liked that photo
      responses:
        200:
          description: Photo unliked successfully
        405:
          $ref: "#/components/responses/MethodNotAllowed"
  /home/ban:
    put:
      tags: ['users actions']
      operationId: banUser
      summary: Ban a user
      description: Add username to the list of banned users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        204:
          description: User banned successfully
        404:
          $ref: "#/components/responses/UserNotFound"
  /home/ban/{user}:
    parameters:
      - $ref: "#/components/parameters/User"
    delete:
      tags: ['users actions']
      operationId: unbanUser
      summary: Unban a user
      description: Deletes username from the list of banned users
      responses:
        200:
          description: User unbanned successfully
        404:
          $ref: "#/components/responses/UserNotFound"
  /home/follow:
    put:
      tags: ['users actions']
      operationId: followUser
      summary: Follow a user
      description: Add username to the list of following
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        204:
          description: User followed successfully
        404:
          $ref: "#/components/responses/UserNotFound"
        405:
          $ref: "#/components/responses/MethodNotAllowed"
  /home/follow/{user}:
    parameters:
      - $ref: "#/components/parameters/User"
    delete:
      tags: ['users actions']
      operationId: unfollowUser
      summary: Unfollow a user
      description: Deletes username from the list of following
      responses:
        200:
          description: User unfollowed successfully
        404:
          $ref: "#/components/responses/UserNotFound"
          
